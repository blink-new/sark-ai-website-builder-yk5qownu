import { useState, useRef } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'

import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Progress } from '@/components/ui/progress'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { ScrollArea } from '@/components/ui/scroll-area'
import { 
  Code, 
 
  Download, 
  Settings, 
  LogOut, 
  Zap, 
  FileText,
  Palette,
  Globe,
  Loader2,
  CheckCircle,
  XCircle,
  Save
} from 'lucide-react'
import { useTheme } from '@/contexts/ThemeContext'

interface User {
  email: string
  username: string
}

interface WebsiteBuilderProps {
  user: User
  onLogout: () => void
}

interface ProjectFile {
  name: string
  type: 'html' | 'css' | 'js' | 'ts'
  content: string
}

interface GenerationStep {
  id: string
  title: string
  status: 'pending' | 'running' | 'completed' | 'error'
  progress: number
}

export function WebsiteBuilder({ user, onLogout }: WebsiteBuilderProps) {
  const { theme, toggleTheme } = useTheme()
  const [prompt, setPrompt] = useState('')
  const [isGenerating, setIsGenerating] = useState(false)
  const [generationSteps, setGenerationSteps] = useState<GenerationStep[]>([])
  const [generatedFiles, setGeneratedFiles] = useState<ProjectFile[]>([])
  const [selectedFile, setSelectedFile] = useState<ProjectFile | null>(null)
  const [previewHtml, setPreviewHtml] = useState('')
  const iframeRef = useRef<HTMLIFrameElement>(null)

  const simulateGeneration = async () => {
    if (!prompt.trim()) return

    setIsGenerating(true)
    setGeneratedFiles([])
    setPreviewHtml('')

    const steps: GenerationStep[] = [
      { id: '1', title: 'Analyzing your request', status: 'pending', progress: 0 },
      { id: '2', title: 'Generating HTML structure', status: 'pending', progress: 0 },
      { id: '3', title: 'Creating CSS styles', status: 'pending', progress: 0 },
      { id: '4', title: 'Adding JavaScript functionality', status: 'pending', progress: 0 },
      { id: '5', title: 'Optimizing for performance', status: 'pending', progress: 0 },
      { id: '6', title: 'Finalizing code', status: 'pending', progress: 0 }
    ]

    setGenerationSteps(steps)

    // Simulate step-by-step generation
    for (let i = 0; i < steps.length; i++) {
      const updatedSteps = [...steps]
      updatedSteps[i].status = 'running'
      setGenerationSteps(updatedSteps)

      // Simulate progress
      for (let progress = 0; progress <= 100; progress += 20) {
        await new Promise(resolve => setTimeout(resolve, 100))
        updatedSteps[i].progress = progress
        setGenerationSteps([...updatedSteps])
      }

      updatedSteps[i].status = 'completed'
      setGenerationSteps([...updatedSteps])
      
      await new Promise(resolve => setTimeout(resolve, 300))
    }

    // Generate mock files
    const mockFiles: ProjectFile[] = [
      {
        name: 'index.html',
        type: 'html',
        content: `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generated Website</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <nav>
            <div class="logo">My Website</div>
            <ul class="nav-links">
                <li><a href="#home">Home</a></li>
                <li><a href="#about">About</a></li>
                <li><a href="#services">Services</a></li>
                <li><a href="#contact">Contact</a></li>
            </ul>
        </nav>
    </header>

    <main>
        <section id="hero">
            <div class="hero-content">
                <h1>Welcome to the Future</h1>
                <p>This website was generated by AI based on your prompt: "${prompt}"</p>
                <button class="cta-button" onclick="showAlert()">Get Started</button>
            </div>
        </section>

        <section id="features">
            <div class="container">
                <h2>Amazing Features</h2>
                <div class="features-grid">
                    <div class="feature-card">
                        <h3>Fast & Responsive</h3>
                        <p>Built with modern web technologies for optimal performance</p>
                    </div>
                    <div class="feature-card">
                        <h3>AI-Powered</h3>
                        <p>Generated entirely by artificial intelligence</p>
                    </div>
                    <div class="feature-card">
                        <h3>Customizable</h3>
                        <p>Easy to modify and extend for your specific needs</p>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <footer>
        <p>&copy; 2024 Generated by Sark AI. All rights reserved.</p>
    </footer>

    <script src="script.js"></script>
</body>
</html>`
      },
      {
        name: 'styles.css',
        type: 'css',
        content: `* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    color: #333;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

header {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    padding: 1rem 0;
    position: fixed;
    width: 100%;
    top: 0;
    z-index: 1000;
}

nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
}

.logo {
    font-size: 1.5rem;
    font-weight: bold;
    color: white;
}

.nav-links {
    display: flex;
    list-style: none;
    gap: 2rem;
}

.nav-links a {
    color: white;
    text-decoration: none;
    transition: opacity 0.3s;
}

.nav-links a:hover {
    opacity: 0.8;
}

main {
    margin-top: 80px;
}

#hero {
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    color: white;
}

.hero-content h1 {
    font-size: 3rem;
    margin-bottom: 1rem;
    animation: fadeInUp 1s ease-out;
}

.hero-content p {
    font-size: 1.2rem;
    margin-bottom: 2rem;
    animation: fadeInUp 1s ease-out 0.2s both;
}

.cta-button {
    background: linear-gradient(45deg, #ff6b6b, #feca57);
    color: white;
    border: none;
    padding: 1rem 2rem;
    font-size: 1.1rem;
    border-radius: 50px;
    cursor: pointer;
    transition: transform 0.3s;
    animation: fadeInUp 1s ease-out 0.4s both;
}

.cta-button:hover {
    transform: translateY(-2px);
}

#features {
    padding: 4rem 0;
    background: white;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
}

#features h2 {
    text-align: center;
    margin-bottom: 3rem;
    font-size: 2.5rem;
    color: #333;
}

.features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
}

.feature-card {
    background: #f8f9fa;
    padding: 2rem;
    border-radius: 15px;
    text-align: center;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s;
}

.feature-card:hover {
    transform: translateY(-5px);
}

.feature-card h3 {
    margin-bottom: 1rem;
    color: #667eea;
}

footer {
    background: #333;
    color: white;
    text-align: center;
    padding: 2rem;
}

@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@media (max-width: 768px) {
    .hero-content h1 {
        font-size: 2rem;
    }
    
    .nav-links {
        display: none;
    }
    
    .features-grid {
        grid-template-columns: 1fr;
    }
}`
      },
      {
        name: 'script.js',
        type: 'js',
        content: `// Generated JavaScript for interactive functionality

document.addEventListener('DOMContentLoaded', function() {
    // Smooth scrolling for navigation links
    const navLinks = document.querySelectorAll('.nav-links a');
    
    navLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            
            const targetId = this.getAttribute('href').substring(1);
            const targetElement = document.getElementById(targetId);
            
            if (targetElement) {
                targetElement.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });
    
    // Add parallax effect to hero section
    window.addEventListener('scroll', function() {
        const scrolled = window.pageYOffset;
        const heroContent = document.querySelector('.hero-content');
        
        if (heroContent) {
            heroContent.style.transform = \`translateY(\${scrolled * 0.5}px)\`;
        }
    });
    
    // Animate feature cards on scroll
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.animation = 'fadeInUp 0.6s ease-out forwards';
            }
        });
    }, observerOptions);
    
    const featureCards = document.querySelectorAll('.feature-card');
    featureCards.forEach(card => {
        observer.observe(card);
    });
    
    // Add loading animation
    const loadingOverlay = document.createElement('div');
    loadingOverlay.className = 'loading-overlay';
    loadingOverlay.innerHTML = '<div class="spinner"></div>';
    document.body.appendChild(loadingOverlay);
    
    // Remove loading overlay after page loads
    window.addEventListener('load', function() {
        loadingOverlay.style.opacity = '0';
        setTimeout(() => {
            loadingOverlay.remove();
        }, 500);
    });
});

// Function called by CTA button
function showAlert() {
    alert('Welcome to your AI-generated website! This was created by Sark AI based on your prompt.');
}

// Add some dynamic styling
const style = document.createElement('style');
style.textContent = \`
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        transition: opacity 0.5s ease;
    }
    
    .spinner {
        width: 50px;
        height: 50px;
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-top: 3px solid white;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
\`;
document.head.appendChild(style);`
      }
    ]

    setGeneratedFiles(mockFiles)
    setSelectedFile(mockFiles[0])
    setPreviewHtml(mockFiles[0].content)
    setIsGenerating(false)
  }

  const downloadFiles = () => {
    generatedFiles.forEach(file => {
      const blob = new Blob([file.content], { type: 'text/plain' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = file.name
      a.click()
      URL.revokeObjectURL(url)
    })
  }

  const getFileIcon = (type: string) => {
    switch (type) {
      case 'html': return <FileText className="w-4 h-4" />
      case 'css': return <Palette className="w-4 h-4" />
      case 'js': 
      case 'ts': return <Code className="w-4 h-4" />
      default: return <FileText className="w-4 h-4" />
    }
  }

  const getFileColor = (type: string) => {
    switch (type) {
      case 'html': return 'text-orange-500'
      case 'css': return 'text-blue-500'
      case 'js': return 'text-yellow-500'
      case 'ts': return 'text-blue-600'
      default: return 'text-gray-500'
    }
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {/* Header */}
      <header className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-4">
              <div className="w-8 h-8 bg-gradient-to-br from-purple-500 to-blue-500 rounded-lg flex items-center justify-center">
                <Code className="w-5 h-5 text-white" />
              </div>
              <h1 className="text-xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
                Sark
              </h1>
            </div>
            
            <div className="flex items-center space-x-4">
              <span className="text-sm text-gray-600 dark:text-gray-300">
                Welcome, {user.username}
              </span>
              <Button variant="ghost" size="sm" onClick={toggleTheme}>
                {theme === 'light' ? '🌙' : '☀️'}
              </Button>
              <Button variant="ghost" size="sm">
                <Settings className="w-4 h-4" />
              </Button>
              <Button variant="ghost" size="sm" onClick={onLogout}>
                <LogOut className="w-4 h-4" />
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Left Panel - Generation Controls */}
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Zap className="w-5 h-5" />
                  <span>AI Website Generator</span>
                </CardTitle>
                <CardDescription>
                  Describe your website and let AI create it for you
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="prompt">Website Description</Label>
                  <Textarea
                    id="prompt"
                    placeholder="Create a modern portfolio website with a hero section, about page, services, and contact form. Use purple and blue colors with smooth animations..."
                    value={prompt}
                    onChange={(e) => setPrompt(e.target.value)}
                    className="min-h-[100px]"
                  />
                </div>
                
                <Button 
                  onClick={simulateGeneration}
                  disabled={isGenerating || !prompt.trim()}
                  className="w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700"
                >
                  {isGenerating ? (
                    <>
                      <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                      Generating...
                    </>
                  ) : (
                    <>
                      <Zap className="w-4 h-4 mr-2" />
                      Generate Website
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>

            {/* Generation Progress */}
            <AnimatePresence>
              {isGenerating && (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                >
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-lg">Generation Progress</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-4">
                        {generationSteps.map((step) => (
                          <div key={step.id} className="flex items-center space-x-3">
                            <div className="flex-shrink-0">
                              {step.status === 'pending' && (
                                <div className="w-5 h-5 border-2 border-gray-300 rounded-full" />
                              )}
                              {step.status === 'running' && (
                                <Loader2 className="w-5 h-5 animate-spin text-blue-500" />
                              )}
                              {step.status === 'completed' && (
                                <CheckCircle className="w-5 h-5 text-green-500" />
                              )}
                              {step.status === 'error' && (
                                <XCircle className="w-5 h-5 text-red-500" />
                              )}
                            </div>
                            <div className="flex-1">
                              <div className="flex items-center justify-between">
                                <span className="text-sm font-medium">{step.title}</span>
                                <span className="text-xs text-gray-500">{step.progress}%</span>
                              </div>
                              <Progress value={step.progress} className="h-2 mt-1" />
                            </div>
                          </div>
                        ))}
                      </div>
                    </CardContent>
                  </Card>
                </motion.div>
              )}
            </AnimatePresence>

            {/* Generated Files */}
            {generatedFiles.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    <span>Generated Files</span>
                    <Button size="sm" onClick={downloadFiles}>
                      <Download className="w-4 h-4 mr-2" />
                      Download All
                    </Button>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {generatedFiles.map((file, index) => (
                      <div
                        key={index}
                        className={`flex items-center space-x-3 p-3 rounded-lg cursor-pointer transition-colors ${
                          selectedFile?.name === file.name 
                            ? 'bg-purple-100 dark:bg-purple-900/20 border border-purple-300 dark:border-purple-700' 
                            : 'bg-gray-50 dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700'
                        }`}
                        onClick={() => setSelectedFile(file)}
                      >
                        <div className={`${getFileColor(file.type)}`}>
                          {getFileIcon(file.type)}
                        </div>
                        <span className="font-medium">{file.name}</span>
                        <Badge variant="secondary" className="ml-auto">
                          {file.type.toUpperCase()}
                        </Badge>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}
          </div>

          {/* Right Panel - Code Editor and Preview */}
          <div className="space-y-6">
            <Card className="h-[600px]">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span>Code Editor & Preview</span>
                  {selectedFile && (
                    <Button size="sm" variant="outline">
                      <Save className="w-4 h-4 mr-2" />
                      Save
                    </Button>
                  )}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-0 h-full">
                <Tabs defaultValue="code" className="h-full">
                  <TabsList className="mx-6 mb-4">
                    <TabsTrigger value="code">
                      <Code className="w-4 h-4 mr-2" />
                      Code
                    </TabsTrigger>
                    <TabsTrigger value="preview">
                      <Globe className="w-4 h-4 mr-2" />
                      Preview
                    </TabsTrigger>
                  </TabsList>
                  
                  <TabsContent value="code" className="h-full px-6 pb-6">
                    <ScrollArea className="h-full">
                      {selectedFile ? (
                        <div className="bg-gray-900 text-gray-100 p-4 rounded-lg font-mono text-sm overflow-auto">
                          <pre className="whitespace-pre-wrap">
                            {selectedFile.content}
                          </pre>
                        </div>
                      ) : (
                        <div className="flex items-center justify-center h-full text-gray-500">
                          <div className="text-center">
                            <Code className="w-12 h-12 mx-auto mb-4 opacity-50" />
                            <p>Select a file to view its code</p>
                          </div>
                        </div>
                      )}
                    </ScrollArea>
                  </TabsContent>
                  
                  <TabsContent value="preview" className="h-full px-6 pb-6">
                    {previewHtml ? (
                      <div className="h-full border rounded-lg overflow-hidden">
                        <iframe
                          ref={iframeRef}
                          srcDoc={previewHtml}
                          className="w-full h-full border-0"
                          title="Website Preview"
                        />
                      </div>
                    ) : (
                      <div className="flex items-center justify-center h-full text-gray-500">
                        <div className="text-center">
                          <Globe className="w-12 h-12 mx-auto mb-4 opacity-50" />
                          <p>Generate a website to see the preview</p>
                        </div>
                      </div>
                    )}
                  </TabsContent>
                </Tabs>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}